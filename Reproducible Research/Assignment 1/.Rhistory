myhigh
qplot(drv,hwy,data=mpg,geom='boxplot')
qplot(drv,hwy,data=mpg,geom='boxplot', color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ, hwy, data=mpg, facets= . ~ drv)
qplot(hwy, data=mpg, facets= drv ~ ., binwidth=2)
library(swirl)
swirl()
qplot(displ,hwy,data=mpg,geom=c('point','smooth'),facets= .~drv)
g <- ggplot(mpg, )
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_oint()
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method=lm)
g+geom_point()+geom_smooth(method='lm')
g+geom_point()+geom_smooth(method='lm',facet_grid(.~drv))
g+geom_point()+geom_smooth(method='lm')
g+geom_point()+geom_smooth(method='lm')+facet_grid(.~drv)
g+geom_point()+geom_smooth(method='lm')+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color='pink',size=4,alpha=1/2)+geom_smooth(method='lm')+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color='pink',size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hmy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size=2,alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FASLE) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size=2,alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size=2,alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv), theme_bw(base_family = "Times"))
g+geom_point(aes(color=drv), theme_bw(base_family = "Times"))
g+geom_point(aes(color=drv)
)
g+geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
warnings()
plot(myx,myy,type='l',ylim=c(-3,3))
g <- ggplot(testdat,aes(myx,myy))
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line(aes(ylim(-3,3))
)
g+geom_line()+ylim(-3,3)
g+geom_line()+ylim(-3,3)+coord_cartesian(ylim=c(-3,3))
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(displ,hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
library(swirl)
swirl()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method='lm', se=FALSE, size=2, color='black')
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method='lm', se=FALSE, size=2, color='black')+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
qplot(diamonds$price)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30,fill=cut)
qplot(price, data=diamonds, geon='density')
qplot(price, data=diamonds, geom='density')
qplot(price, data=diamonds, geom='density', color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut,geom_smooth(method='lm'))
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method='lm')
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method='lm')+facets(.~cut)
qplot(carat, price, data=diamonds, color=cut,facets(.~cut))+geom_smooth(method='lm')
qplot(carat, price, data=diamonds, color=cut+geom_smooth(method='lm')
)
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method='lm')
qplot(carat, price, data=diamonds, color=cut, facets=.~cut)+geom_smooth(method='lm')
g <- ggplot(diamonds, aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cum~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method='lm', size=3, color='pink')
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
rm(list=ls(
))
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col='blue')
abline(h=.4, col='red')
5
abline(h=.05, col='green')
12
abline(h=.05, col='green')
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c('red', 'orange', 'purple'), pch=3, cex=2, lwd=2)
mdist
mdist(x,y,cx,cy)
apply(distTmp, 2, whick.min)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols[newClust])
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust, mean)
tapply(y,newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mena)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c('black', 'red', 'green'), pch=3,cex=3, lwd=3)
]plot(x,y,col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col= kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit('addPatt.R')
source('addParr.R', local=TRUE)
source('addPatt.R', local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %8% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1 <- svd(dataMatrix)
svd1$[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd$u[,1] * svd$d[1]) %*% svd$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
f
de
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
a3 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(Rserve)
Rserve()
library(swirl)
install.packages(swirl)
install.packages('swirl')
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
rm(list=ls())
swirl()
ssd
dim(ssd)
names(ssd[562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
sub1
dim(sub1)
anems(sub1)
naems(sub1)
names(sub1)
naems(sub1[1:12])
names(sub1[1:12])
myedit('showXY.R')
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
macCon <- which.max(svd$1)
maxCon <- which.max(svd$1)
maxCon <- which.max(svd$1[2])
maxC
which.max()
which.max(svd1$v[2])
maxCon <-  which.max(svd1$v[,2])
mdist <- dist(sub1(10:12))
mdist <- dist(sub1[10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[1:561], centers=6)
kClust <- kmeans(sub1[, -c(562:563)], centers=6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562:563)], centers=6, nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$center[laying, 1:12], pch=19, ylab="Laying Cluster")
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
install.packages('kernlab')
library(kernlab)
dat(spam)
data(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+1)
plot(log10(trainSpam[, 1:4]+1))
plot(log10(trainSpam[, 1:4]+1))
hCluster = hcluster(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hCluster <- hcluster(dist(t(trainSpam[, 1:57])))
library(kernlab)
hCluster <- hcluster(dist(t(trainSpam[, 1:57])))
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t((log10(trainSpam[, 1:57]))))
hClusterUpdated = hclust(dist(t((log10(trainSpam[, 1:57])))))
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:57]))))
plot(hClusterUpdated)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[, 1:57]))))
plot(hClusterUpdated)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[, 1:55] +1 ))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response="numType")
glmFit = glm(lmFormula, family = "binomial", data=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family="binomial", data=trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
(61 + 458)/(1346 + 458 + 61 + 449)
install.packages('knitr')
.libPaths()
# Fill data with interval mean values
activityPattern <- data %>%
group_by(interval) %>%
summarise(steps=mean(steps))
activityPattern
setwd('D:/Coursera/datasciencecoursera/Reproducible Research/Assignment 1')
data <- read.csv('./Data/activity.csv')
head(data)
summary(data)
str(data)
library(plyr)
library(dplyr)
library(tidyr)
# Check the total histogram
hist(data$steps, breaks=15)
# Removing zero values and replotting
nonnull <- data %>%
filter(steps !=0)
hist(nonnull$steps)
# Grouping by day
steps <- data %>%
group_by(date) %>%
summarise_all(sum)
hist(steps$steps, breaks =15)
#Calculate mean and median
medianSteps <- data %>%
filter(steps != 0) %>%
group_by(date) %>%
summarise(sum = sum(steps), mean=mean(steps), median=median(steps))
head(steps)
#See the pattern by interval, day by day
activityPattern <- data %>%
filter(steps !=0) %>%
group_by(interval) %>%
summarise(steps=mean(steps))
medianSteps
activityPattern
plot(activityPattern$interval,activityPattern$steps,type="l",xlab="Interval",ylab="Date")
sum(activityPattern$steps)
#Get the row with max value
activityPattern[which.max(activityPattern$steps),]
# How many NAs are in the dataset?
sum(is.na(data$steps))
sum(is.na(data$steps))/(sum(is.na(data$steps))+sum(!is.na(data$steps)))*100
# Fill data with interval mean values
activityPattern2 <- data %>%
group_by(interval) %>%
summarise(steps=mean(steps))
activityPattern2
# Fill data with interval mean values
activityPattern2 <- data %>%
group_by(interval)
activityPattern2
# Fill data with interval mean values
activityPattern2 <- data %>%
replace(steps, is.na(.), 0)
# Fill data with interval mean values
activityPattern2 <- data %>%
replace(., is.na(.), 0)
# Fill data with interval mean values
activityPattern2 <- data %>%
replace(., is.na(.), 0) %>%
group_by(interval) %>%
summarise(steps=mean(steps))
activityPattern2
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by=date) %>%
mutate(steps = ifelse(is.na(steps), mean(steps),steps))
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="date") %>%
mutate(steps = ifelse(is.na(steps), mean(steps),steps))
activityPattern2
source('D:/Coursera/datasciencecoursera/Reproducible Research/Assignment 1/Assignment1.r', echo=TRUE)
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps = ifelse(is.na(steps), mean(steps),steps))
fullData
sum(is.na(fullData$steps.x))
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps.x = ifelse(is.na(steps), mean(steps),steps))
fullData
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps.x = ifelse(is.na(steps), mean(steps),steps))
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval")
fullData
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval")
mutate(steps.x = ifelse(is.na(steps.x), steps,steps.x))
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps.x = ifelse(is.na(steps.x), steps,steps.x))
fullData
sum(is.na(fullData$steps.x))
# Plots with full table
fullSteps <- fullData %>%
group_by(date) %>%
summarise_all(sum)
head(fullSteps)
hist(fullSteps$steps.x, breaks =15)
hist(fullSteps$steps.x, breaks =15)
hist(steps$steps, breaks =15)
hist(fullSteps$steps.x, breaks =15)
# Mean and Median with full data
fullMedianSteps <- fullData %>%
group_by(date) %>%
summarise(sum = sum(steps), mean=mean(steps), median=median(steps, na.rm=T))
fullMedianSteps
fullData
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps.x = ifelse(is.na(steps.x), steps,steps.x))
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps.x = ifelse(is.na(steps.x), steps,steps.x)) %>%
select(steps=steps.x, date, interval)
fullData
sum(is.na(fullData$steps.x))
sum(is.na(fullData$steps))
# Plots with full table
fullSteps <- fullData %>%
group_by(date) %>%
summarise_all(sum)
head(fullSteps)
hist(fullSteps$steps, breaks =15)
# Mean and Median with full data
fullMedianSteps <- fullData %>%
group_by(date) %>%
summarise(sum = sum(steps), mean=mean(steps), median=median(steps, na.rm=T))
fullMedianSteps
# Mean and Median with full data
fullMedianSteps <- fullData %>%
group_by(date) %>%
summarise(sum = sum(steps), mean=mean(steps), median=median(steps, na.rm=T))
# Mean and Median with full data
fullMedianSteps <- fullData %>%
filter(steps !=0) %>%
group_by(date) %>%
summarise(sum = sum(steps), mean=mean(steps), median=median(steps, na.rm=T))
fullMedianSteps
weekdays(fullData)
weekdays(fullData$date)
weekdays(as.date(fullData$date))
weekdays(as.Date(fullData$date))
fullData <- fullData
mutate(weekdays(as.Date(fullData$date)))
fullData <- fullData %>%
mutate(weekdays(as.Date(fullData$date)))
fullData
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date)), weekend? = ifelse(weekday == c("sábado", "domingo"))1,0)
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date)), weekend = ifelse(weekday == c("sábado", "domingo"))1,0)
fullData
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date)), weekend = ifelse(weekday == c("sábado", "domingo"),1,0))
fullData
fullData <- data
fullData <- fullData %>%
rename(steps.x = steps) %>%
join(activityPattern2, by="interval") %>%
mutate(steps.x = ifelse(is.na(steps.x), steps,steps.x)) %>%
select(steps=steps.x, date, interval)
fullData
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date)), weekend = ifelse(weekday == c("sábado", "domingo"),1,0))
fullData
fulldata[date="2012-10-06"]
fulldata[date="2012-10-06",]
fulldata[,date="2012-10-06"]
fulldata[,fulldata$date="2012-10-06"]
fulldata[,fullData$date="2012-10-06"]
fulldata[fullData$date="2012-10-06"]
fulldata[fullData$date="2012-10-06",]
fulldata[fullData$date == "2012-10-06",]
fullData[fullData$date == "2012-10-06", ]
fullData[fullData$date == "2012-10-07", ]
fullData[fullData$date == "2012-10-08", ]
fullData[fullData$date == "2012-10-06", ]
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date)), weekend = ifelse(weekday == c("sábado", "domingo"), 1, 0))
fullData
fullData[fullData$date == "2012-10-06", ]
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date))) %>%
mutate(weekend = ifelse(weekday == c("sábado", "domingo"), 1, 0))
fullData
fullData[fullData$date == "2012-10-06", ]
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date))) %>%
mutate(weekend = ifelse(weekday == c("sábado", "domingo"), "yes", "no"))
fullData
fullData[fullData$date == "2012-10-06", ]
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date))) %>%
mutate(weekend = ifelse(weekday == c("sábado", "domingo"), 1, 0)) %>%
mutate(weekend = ifelse(weekday == c("sábado", "domingo"), 1, 0))
fullData
fullData[fullData$date == "2012-10-06", ]
fullData
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date))) %>%
mutate(weekend = ifelse(weekday == c("sábado" | "domingo"), 1, 0))
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date))) %>%
mutate(weekend = ifelse(weekday == "sábado" | "domingo", 1, 0))
fullData <- fullData %>%
mutate(weekday = weekdays(as.Date(fullData$date))) %>%
mutate(weekend = ifelse(weekday == "sábado" | weekday =="domingo", 1, 0))
fullData
fullData[fullData$date == "2012-10-06", ]
